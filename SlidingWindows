#include <iostream>

#include <deque>

#include <algorithm>
#include <numeric>

using namespace std;

void max(deque<int> v,int k )

{

    if(v.size()<k) return;

    cout<<*max_element(v.begin(), v.begin()+k);

    v.pop_front();

    max(v,k);

}

int max_sum_win(vector<int> &s,int win){
    int sum=std::accumulate(s.begin(),s.begin()+win,0);
    //cout<<sum<<endl;
    auto first=s.begin();
    for(int i=1;i<=s.size()-win+1;i++)
    {
       int temp=std::accumulate(first,first+win,0);
       //cout<<" "<<temp;
       if(temp>sum)sum=temp;
       first++;
    }
    cout<<endl;
    return sum;
}

int main()

{

    deque<int> s{1,3,-1,4,-3,5,3,6,7,-1,8};
    vector<int> s1{1,3,-1,4,-3,5,3,6,7,-1,8};
    cout<<"Max of each windows :";
    max(s,3);
    
    cout<<"\n Max of sum sliding windows :";
    cout<<max_sum_win(s1,3);

    return 0;

}
